.\" Text automatically generated by txt2man
.TH stress 1 "21 Jan 2023" "stress-1.0.7" "tool to impose load on and stress test systems"
.SH NAME
\fBstress \fP- tool to impose load on and stress test a computer system
\fB
.SH SYNOPSIS
.nf
.fam C
 \fBstress\fP [\fIOPTIONS\fP]

.fam T
.fi
.fam T
.fi
.SH DESCRIPTION
\fBstress\fP is a tool that imposes a configurable amount of CPU, memory, I/O,
or disk \fBstress\fP on a POSIX-compliant operating system and reports any errors
it detects.
.PP
\fBstress\fP is not a benchmark. It is a tool used by system administrators to
evaluate how well their systems will scale, by kernel programmers to evaluate
perceived performance characteristics, and by systems programmers to expose
the classes of bugs which only or more frequently manifest themselves when
the system is under heavy load.
.SH OPTIONS
.TP
.B
-?, \fB--help\fP
Show this help statement.
.TP
.B
\fB--version\fP
Show version statement.
.TP
.B
\fB-v\fP, \fB--verbose\fP
Be verbose.
.TP
.B
\fB-q\fP, \fB--quiet\fP
Be quiet.
.TP
.B
\fB-n\fP, \fB--dry-run\fP
Show what would have been done.
.TP
.B
\fB-t\fP, \fB--timeout\fP <N>
Timeout after N seconds. This option is ignored by \fB-n\fP.
.TP
.B
\fB--backoff\fP <N>
Wait for factor of microseconds before starting work.
.TP
.B
\fB-c\fP, \fB--cpu\fP <N>
Spawn N workers spinning on \fBsqrt\fP().
.TP
.B
\fB-i\fP, \fB--io\fP <N>
Spawn N workers spinning on \fBsync\fP().
.TP
.B
\fB-m\fP, \fB--vm\fP <N>
Spawn N workers spinning on \fBmalloc\fP()/free().
.TP
.B
\fB--vm-bytes\fP <B>
Malloc B bytes per vm worker (default is 256MB).
.TP
.B
\fB--vm-stride\fP <B>
Touch a byte every B bytes (default is 4096).
.TP
.B
\fB--vm-hang\fP <N>
Sleep N secs before free (default none, 0 is inf).
.TP
.B
\fB--vm-keep\fP
Redirty memory instead of freeing and reallocating.
.TP
.B
\fB-d\fP, \fB--hdd\fP <N>
Spawn N workers spinning on \fBwrite\fP()/unlink().
.TP
.B
\fB--hdd-bytes\fP <B>
Write B bytes per hdd worker (default is 1GB). The file
will be created with \fBmkstemp\fP() in the current directory.
.PP
Note: Numbers may be suffixed with s,m,h,d,y (time) or B,K,M,G (size).
.SH EXAMPLES
The simple case is that you just want to bring the system load average up to an
arbitrary value. The following forks 13 processes, each of which spins in a
tight loop calculating the \fBsqrt\fP() of a random number acquired with \fBrand\fP().
.PP
.nf
.fam C
    stress -c 13

.fam T
.fi
Long options are supported, as well as is making the output less verbose. The
following forks 1024 processes, and only reports error messages if any.
.PP
.nf
.fam C
    stress --quiet --cpu 1k

.fam T
.fi
To see how your system performs when it is I/O bound, use the \fB-i\fP switch. The
following forks 4 processes, each of which spins in a tight loop calling
\fBsync\fP(), which is a system call that flushes memory buffers to disk.
.PP
.nf
.fam C
    stress -i 4

.fam T
.fi
Multiple hogs may be combined on the same command line. The following does
everything the preceding examples did in one command, but also turns up the
verbosity level as well as showing how to cause the command to self-terminate
after 1 minute.
.PP
.nf
.fam C
    stress -c 13 -i 4 --verbose --timeout 1m

.fam T
.fi
You can write a file of arbitrary length to disk. The file is created with
\fBmkstemp\fP() in the current directory.
.PP
.nf
.fam C
    stress -d 1 --hdd-bytes 13

    Large file support is enabled.

    stress -d 1 --hdd-bytes 3G

.fam T
.fi
.SH AUTHOR
\fBstress\fP was originally developed by Amos Waterland <apw@debian.org> and
is maintained by some volunteers.
.PP
Currently, source code and newer versions are available at
https://github.com/resurrecting-open-source-projects/\fBstress\fP
